- content_for :title, "#{@series.race.name} - #{@series.name} - #{t('.title')}"
%h2 #{@series.name} - #{t('.title')}
- content_for :sub_sub_menu do
  = render layout: 'menus/series_sub_menu', locals: { race: @series.race, series_id: @series.id } do |series| official_series_competitors_path(series) end
- if @series.competitors.empty?
  .message.message--info= t('.no_competitors_in_series')
- else
  - if @series.race.sport.start_list?
    - unless @series.has_start_list?
      .message.message--info= t('.create_start_list_info')
    - unless @series.some_competitor_has_arrival_time? || @series.race.start_order == Race::START_ORDER_MIXED
      - start_list_title = @series.has_start_list? ? t('.create_new_start_list') : t('.create_start_list')
      %h3= start_list_title
      = flash_error
      = flash_success
      = render :partial => 'shared/form_errors', locals: { item: @series }
      = form_for([:official, @series], url: official_series_start_list_path, html: { onsubmit: "return warnRerun(#{@series.has_start_list?})", class: 'form' }) do |f|
        .form__field.form__field--sm.row
          .col-xs-12.col-sm-3= f.label :first_number
          .col-xs-12.col-sm-9= f.number_field :first_number
        .form__field.row
          .col-xs-12.col-sm-3
            %label Kilpailun alkamisaika
          .col-xs-12.col-sm-9= time_print @series.race.start_time
        .form__field.form__field--sm.row
          .col-xs-12.col-sm-3= f.label :start_time
          .col-xs-12.col-sm-9
            = start_days_form_field(f, @series)
            %span#series_start_time_row
              = f.time_select :start_time, :include_seconds => true, :include_blank => true
              (00:00:00-pohjainen)
        .form__field.row
          .col-xs-12.col-sm-3
            %label Sarjan todellinen lähtöaika
          .col-xs-12.col-sm-9#real_start_time
        .form__field.row
          .col-xs-12.col-sm-3
            %label #{t "order_method"}:
          .col-xs-12.col-sm-9
            = radio_button_tag :order_method, Series::START_LIST_ADDING_ORDER, Series::START_LIST_ADDING_ORDER == @order_method
            = t "order_method_#{Series::START_LIST_ADDING_ORDER}"
            = radio_button_tag :order_method, Series::START_LIST_RANDOM, Series::START_LIST_RANDOM == @order_method
            = t "order_method_#{Series::START_LIST_RANDOM}"
        .form__buttons
          = submit_tag start_list_title, class: 'button button--primary'
      %h3= t('.added_competitors')
  = render partial: 'official/competitors/list', locals: { series: @series }
.buttons
  - add_title = @series.competitors.empty? ? t('.add_competitor') : t('.add_new_competitor')
  = link_to add_title, new_official_series_competitor_path(@series), class: 'button button--add'
  - if @series.has_start_list?
    = link_to t(:download_start_list_pdf), series_start_list_path(@series, format: 'pdf'), class: 'button button--pdf'
  = link_to t('official.add_competitors_from_csv_file'), new_official_race_csv_import_path(@series.race), class: 'button'
= render layout: 'menus/series_sub_menu', locals: { race: @series.race, series_id: @series.id, mobile: true } do |series|
  = official_series_competitors_path(series)
.buttons.buttons--nav
  = link_to t(:back_to_official_race_page), official_race_path(@series.race), class: 'button button--back'
:javascript
  var raceHours = #{@series.race.start_time.hour};
  var raceMins = #{@series.race.start_time.min};
  var raceSecs = #{@series.race.start_time.sec};
  function warnRerun(rerun) {
    if (rerun) {
      return confirm('Haluatko varmasti luoda uuden lähtölistan kilpailijoille? ' +
        'Nykyiset lähtönumerot ja -ajat korvataan uusilla.');
    }
    return true;
  }
  function calculateRealStartTime() {
    var seriesSecs = parseInt($('#series_start_time_6i').val(), 10) + raceSecs;
    var seriesMins = parseInt($('#series_start_time_5i').val(), 10) + raceMins;
    var extraHours = Math.floor(seriesMins / 60);
    seriesMins %= 60;
    var seriesHours = parseInt($('#series_start_time_4i').val(), 10) + raceHours + extraHours;
    $('#real_start_time').text(padNumber(seriesHours) + ':' + padNumber(seriesMins) + ':' + padNumber(seriesSecs));
  }
  function padNumber(number) {
    return number < 10 ? '0' + number : number;
  }
  $('#series_start_time_row').on('change', 'select', function () {
    calculateRealStartTime();
  });
  $(document).ready(function () {
    calculateRealStartTime();
  });
